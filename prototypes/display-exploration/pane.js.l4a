{"type":"Reference","version":"545094585c7dd892542e31794982c21b5c1b454e","content":"import d3 from \"src/external/d3.v5.js\"\nimport { \n  NullAction, \n  ResetAction, \n  GroupingAction, \n  FilterAction, \n  ColoringAction \n} from \"https://lively-kernel.org/lively4/BP2019RH1/prototypes/display-exploration/actions.js\"\n\nexport class Pane {\n  \n  static deepClone(object) {\n    return JSON.parse(JSON.stringify(object))\n  }\n\n  static getRandomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min\n  }\n  \n  constructor(div, pointWidth, data, colorMap, paneWidth, paneHeight) {\n    this.container = div\n    this.div = <div></div>\n    this.breakLine = <div></div>\n    this.childrenDiv = <div></div>\n    this.controlPanelDiv = <div></div>\n    this.controlsDiv = <div></div>\n    this.legendDiv = <div></div>\n    this.currentScaleAttributeDiv = <p></p>   \n    this.currentColorAttributeDiv = <p></p>\n    this.colorLegendDiv = <div></div>\n    this.canvasDiv = <div></div>;\n    this.axis = {}\n    this.g_axis = {}\n\n    this.deleteButton = <Button>x</Button>\n    this.appendButton = <Button>Add subsequent pane</Button>\n    this.actionSelect = <select></select>\n    this.attributeSelect = <select></select>\n    this.valueSelect = <select></select>\n    this.applyActionButton = <button>Apply</button>\n\n    this.actions = [\"none\", \"filter\", \"grouping\", \"coloring\"]\n    this.selectedAction = {}\n    this.selectedAttribute = {}\n    this.selectedValue = {}\n\n    this.canvasMargin = {}\n    this.canvasDimensions = {}\n    this.canvas = d3.select(this.canvasDiv).append(\"canvas\")\n    this.scaleSVG = d3.select(this.canvasDiv).append('svg')\n\n    this.scaleHeight = {}\n    this.scale = {}\n    \n    this.defaultScaleAttribute = {}\n    this.currentScaleAttribute = {}\n    \n    this.defaultColorAttribute = {}\n    this.currentColorAttribute = {}\n    \n    this.pointWidth = pointWidth\n    this.div.style.width = paneWidth\n    this.div.style.height = paneHeight\n    \n    this.groupGapSize = 10\n    \n    this.incomingData = Pane.deepClone(data)\n    this.processedData = {}\n    \n    this.colorMap = colorMap\n    \n    this.diagram = {}\n    this.children = []\n    this.parent = null\n    this.parentConnection = null\n    this.initialize()\n    \n    this.container.appendChild(this.div)\n    this.container.appendChild(this.breakLine)\n    this.container.appendChild(this.childrenDiv)\n    \n    this.div.appendChild(this.controlPanelDiv)\n    this.div.appendChild(this.canvasDiv)\n    \n    this.controlPanelDiv.appendChild(this.deleteButton)\n    this.controlPanelDiv.appendChild(this.appendButton)\n    this.controlPanelDiv.appendChild(<br></br>)\n    \n    this.controlPanelDiv.appendChild(this.controlsDiv)\n    \n    this.controlsDiv.appendChild(this.actionSelect)\n    this.controlsDiv.appendChild(this.applyActionButton)\n    \n    this.controlPanelDiv.appendChild(this.legendDiv)\n    \n    this.legendDiv.appendChild(this.currentScaleAttributeDiv)\n    this.legendDiv.appendChild(this.currentColorAttributeDiv)\n    this.legendDiv.appendChild(this.colorLegendDiv)\n    \n  }\n\n  initialize() {\n\n    this.div.style.border = \"1px solid black\"\n    this.div.style.margin = \"20px\"\n  \n    this.breakLine.style.flexBasis = \"100%\"\n    this.breakLine.style.height = \"0px\";\n       \n    this.childrenDiv.style.display = \"flex\"\n    this.childrenDiv.style.flexDirection = \"row\"\n    this.childrenDiv.style.height = \"auto\"\n    this.childrenDiv.style.width = \"auto\"\n    \n    this.initializeControlPanel()\n    this.initializeDiagram()\n    \n    if (!this.incomingData[0].drawing) {\n      this.initializeData()\n    }\n    this.processedData = Pane.deepClone(this.incomingData)\n    \n    this.setCurrentDrawingStateAsDefault() \n    this.runSelectedAction()\n    this.draw()\n  }\n\n  initializeControlPanel() {\n    this.controlPanelDiv.style.width = this.getPixelValueFromString(this.div.style.width) * 0.25 + \"px\"\n    this.controlPanelDiv.style.height = this.getPixelValueFromString(this.div.style.height) * 0.95 + \"px\"\n    this.controlPanelDiv.style.float = \"left\"\n    this.controlPanelDiv.style.overflow = \"auto\"\n    \n    this.deleteButton.addEventListener(\"click\", () => {this.delete()})\n    this.appendButton.addEventListener(\"click\", () => {this.registerNewPane()})\n\n    this.controlsDiv.style.width = this.getPixelValueFromString(this.controlPanelDiv.style.width) * 0.95 + \"px\"\n    this.controlsDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.30 + \"px\"\n    this.controlsDiv.style.margin = \"0 auto\"\n    this.controlsDiv.style.display = \"table\"\n    \n    this.setSelectedAction(\"none\")\n    this.actionSelect.style.margin = \"0 auto\"\n    this.actionSelect.style.display = \"table\"\n    this.actions.forEach(action => {\n      this.actionSelect.options[this.actionSelect.options.length] = new Option(action)\n    })\n    this.actionSelect.addEventListener(\"change\", () => {\n      this.setSelectedAction(this.actionSelect.options[this.actionSelect.selectedIndex].value)\n      this.setSelectedAttribute(this.attributeSelect.options[this.attributeSelect.selectedIndex].value)\n      this.refreshControlPanelBySelectedAction()\n    })\n    \n    this.setSelectedAttribute(\"\")\n    this.attributeSelect.style.margin = \"0 auto\"\n    this.attributeSelect.style.display = \"table\"\n    let exampleObject = Pane.deepClone(this.incomingData[0])\n    delete exampleObject.drawing\n    Object.keys(exampleObject).forEach(key => {\n      this.attributeSelect.options[this.attributeSelect.options.length] = new Option(key)\n    })\n    this.attributeSelect.addEventListener(\"change\", () => {\n      this.setSelectedAttribute(this.attributeSelect.options[this.attributeSelect.selectedIndex].value)\n      this.refreshControlPanelBySelectedAttribute()\n    })\n    \n    this.setSelectedValue(\"\")\n    this.valueSelect.style.margin = \"0 auto\"\n    this.valueSelect.style.display = \"table\"\n    this.valueSelect.addEventListener(\"change\", () => {\n      this.setSelectedValue(this.valueSelect.options[this.valueSelect.selectedIndex].value)\n    })\n    \n    this.applyActionButton.style.margin = \"0 auto\"\n    this.applyActionButton.style.display = \"table\"\n    this.applyActionButton.addEventListener(\"click\", () => {\n      this.runSelectedAction()\n    })\n    \n    this.legendDiv.style.width = this.getPixelValueFromString(this.controlPanelDiv.style.width) * 0.95 + \"px\"\n    this.legendDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.70 + \"px\"\n    this.legendDiv.style.margin = \"0 auto\"\n    this.legendDiv.style.display = \"table\"\n    \n    this.currentScaleAttributeDiv.style.width = this.getPixelValueFromString(this.legendDiv.style.width) * 0.95 + \"px\"\n    this.currentScaleAttributeDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.10 + \"px\"\n\n    this.currentColorAttributeDiv.style.width = this.getPixelValueFromString(this.legendDiv.style.width) * 0.95 + \"px\"\n    this.currentColorAttributeDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.10 + \"px\"\n    \n    this.setDefaultColorAttribute(\"\")\n    this.setCurrentColorAttribute(\"\")\n    this.colorLegendDiv.style.width = this.getPixelValueFromString(this.controlPanelDiv.style.width) * 0.95 + \"px\"\n    this.colorLegendDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.75 + \"px\"\n    this.colorLegendDiv.style.margin = \"0 auto\"\n    this.colorLegendDiv.style.display = \"table\"\n    \n    this.refreshColorLegend()\n  }\n  \n  initializeDiagram() {   \n    this.canvasDiv.style.width = this.getPixelValueFromString(this.div.style.width) * 0.70 + \"px\"\n    this.canvasDiv.style.height = this.getPixelValueFromString(this.div.style.height) * 0.60 + \"px\"\n    this.canvasDiv.style.float = \"right\"  \n   \n    this.canvasMargin = {\n      \"top\": 12, \n      \"right\": 12, \n      \"bottom\": 0, \n      \"left\": 12\n    }\n    \n    this.canvasDimensions = this.calculateCanvasDimensions()\n    \n    this.canvas\n      .attr(\"width\", this.canvasDimensions.width)\n      .attr(\"height\", this.canvasDimensions.height)\n      .attr(\"class\", 'canvas-plot')\n      .style('margin-left', this.canvasMargin.left + 'px')\n      .style('margin-top', this.canvasMargin.top + 'px')\n    \n    this.setDefaultScaleAttribute(\"\")\n    this.setCurrentScaleAttribute(\"\")\n    \n    this.scaleHeight = this.getPixelValueFromString(this.div.style.height) * 0.40\n    \n    this.scaleSVG \n      .attr('width', this.getPixelValueFromString(this.canvasDiv.style.width))\n      .attr('height', this.scaleHeight)\n      .attr('class', 'svg-plot')\n      .attr('transform', `translate(${this.canvasMargin.left}, ${this.canvasMargin.top})`)\n    \n    this.scale = d3.scaleBand().domain([]).range([0, this.canvasDimensions.width])\n    this.axis = d3.axisBottom(this.scale)\n    this.g_axis = this.scaleSVG.append('g').call(this.axis)\n  }\n  \n  initializeData() {\n    let colorMap = this.getColorMap()\n    this.incomingData.forEach(element => {\n      element.drawing = {}\n      element.drawing.defaultColor = colorMap[\"default\"]\n      element.drawing.currentColor = element.drawing.defaultColor\n      element.drawing.currentPosition = {\n      \"x\": Pane.getRandomInteger(0, this.canvasDimensions.width), \n      \"y\": Pane.getRandomInteger(0, this.canvasDimensions.height)\n      }\n      element.drawing.defaultPosition = {\n      \"x\": element.drawing.currentPosition.x,\n      \"y\": element.drawing.currentPosition.y\n      }\n    })\n  }\n  \n  refreshDivSizes() {\n    this.controlPanelDiv.style.width = this.getPixelValueFromString(this.div.style.width) * 0.25 + \"px\"\n    this.controlPanelDiv.style.height = this.getPixelValueFromString(this.div.style.height) * 0.95 + \"px\"\n\n    this.controlsDiv.style.width = this.getPixelValueFromString(this.controlPanelDiv.style.width) * 0.95 + \"px\"\n    this.controlsDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.30 + \"px\"\n    \n    this.legendDiv.style.width = this.getPixelValueFromString(this.controlPanelDiv.style.width) * 0.95 + \"px\"\n    this.legendDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.70 + \"px\"\n    \n    this.currentScaleAttributeDiv.style.width = this.getPixelValueFromString(this.legendDiv.style.width) * 0.95 + \"px\"\n    this.currentScaleAttributeDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.10 + \"px\"\n\n    this.currentColorAttributeDiv.style.width = this.getPixelValueFromString(this.legendDiv.style.width) * 0.95 + \"px\"\n    this.currentColorAttributeDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.10 + \"px\"\n    \n    this.colorLegendDiv.style.width = this.getPixelValueFromString(this.controlPanelDiv.style.width) * 0.95 + \"px\"\n    this.colorLegendDiv.style.height = this.getPixelValueFromString(this.controlPanelDiv.style.height) * 0.75 + \"px\"\n   \n    \n    this.refreshColorLegend()\n    \n    this.canvasDiv.style.width = this.getPixelValueFromString(this.div.style.width) * 0.70 + \"px\"\n    this.canvasDiv.style.height = this.getPixelValueFromString(this.div.style.height) * 0.60 + \"px\"\n    \n    this.canvasDimensions = this.calculateCanvasDimensions()\n    \n    this.canvas\n      .attr(\"width\", this.canvasDimensions.width)\n      .attr(\"height\", this.canvasDimensions.height)\n    \n    this.scaleHeight = this.getPixelValueFromString(this.div.style.height) * 0.40\n    \n    this.scaleSVG \n      .attr('width', this.getPixelValueFromString(this.canvasDiv.style.width))\n      .attr('height', this.scaleHeight)\n      .attr('class', 'svg-plot')\n      .attr('transform', `translate(${this.canvasMargin.left}, ${this.canvasMargin.top})`)\n    \n    this.scale = d3.scaleBand().domain([]).range([0, this.canvasDimensions.width])\n    this.axis = d3.axisBottom(this.scale)\n    this.g_axis.call(this.axis)\n  }\n  \n  refreshControlPanelBySelectedAction() {\n    if (this.getSelectedAction() === \"none\") {\n      this.controlsDiv.removeChild(this.attributeSelect)\n      if (this.controlsDiv.contains(this.valueSelect)) {  \n        this.controlsDiv.removeChild(this.valueSelect)\n      }\n      return\n    }\n    \n    this.controlsDiv.removeChild(this.applyActionButton)\n    this.controlsDiv.appendChild(this.attributeSelect)\n    \n    if (this.getSelectedAction() === \"filter\") {\n      this.refreshValueSelectOptions()\n      if (!this.controlsDiv.contains(this.valueSelect)) {  \n        this.controlsDiv.appendChild(this.valueSelect)\n      }\n    } else {      \n      if (this.controlsDiv.contains(this.valueSelect)) {  \n        this.controlsDiv.removeChild(this.valueSelect)\n      }\n    }\n    \n    this.controlsDiv.appendChild(this.applyActionButton)\n  }\n  \n  refreshControlPanelBySelectedAttribute() {\n    if (this.getSelectedAction() !== \"filter\") {\n      if (this.controlsDiv.contains(this.valueSelect)) {  \n        this.controlsDiv.removeChild(this.valueSelect)\n      }\n      return\n    }\n    \n    this.refreshValueSelectOptions()\n    \n    this.controlsDiv.removeChild(this.applyActionButton)\n    this.controlsDiv.appendChild(this.valueSelect)\n    this.controlsDiv.appendChild(this.applyActionButton)\n  }\n  \n  refreshValueSelectOptions() {\n    this.removeOptionsOfSelect(this.valueSelect)\n    \n    let values = this.getValuesOfAttribute(this.getSelectedAttribute())\n    values.forEach(value => {\n      this.valueSelect.options[this.valueSelect.options.length] = new Option(value)\n    })\n    \n    this.valueSelect.dispatchEvent(new Event(\"change\"))\n  }\n  \n  refreshAttributeSelectOptions() {\n    this.removeOptionsOfSelect(this.attributeSelect)\n    \n    let exampleObject = Pane.deepClone(this.incomingData[0])\n    delete exampleObject.drawing\n    Object.keys(exampleObject).forEach(key => {\n      this.attributeSelect.options[this.attributeSelect.options.length] = new Option(key)\n    })\n    \n    this.attributeSelect.dispatchEvent(new Event(\"change\"))\n  }\n  \n  refreshAttributeSelectOptionsRecursively() {\n    this.refreshAttributeSelectOptions()\n    \n    this.getChildren().forEach(child => {\n      child.refreshAttributeSelectOptionsRecursively()\n    })\n  }\n  \n  refreshColorLegend() {\n    this.removeChildren(this.colorLegendDiv)\n    \n    let colorValues = this.getCombinationsOfValuesOfAttribute(this.getCurrentColorAttribute())\n    let colorMap = this.getColorMap()\n    \n    let width = this.getPixelValueFromString(this.colorLegendDiv.style.height) * 0.97 + \"px\"\n    let height = this.getPixelValueFromString(this.colorLegendDiv.style.height) * 0.09 + \"px\"\n    \n    if (colorValues.length <= 0) {\n      let colorRectangle = <div></div>;\n      colorRectangle.innerHTML = \"default\"\n      colorRectangle.style.flush = \"left\"\n      colorRectangle.style.background = colorMap[\"default\"]\n      colorRectangle.style.width = width\n      colorRectangle.style.height = height\n      \n      this.colorLegendDiv.appendChild(colorRectangle)\n    } else {\n      colorValues.forEach(value => {\n        let colorRectangle = <div></div>;\n        colorRectangle.innerHTML = value\n        colorRectangle.style.flush = \"left\"\n        colorRectangle.style.background = colorMap[value]\n        colorRectangle.style.width = width\n        colorRectangle.style.height = height\n        colorRectangle.style.overflow = \"hidden\"\n        colorRectangle.style.textOverflow = \"ellipsis\"\n\n        this.colorLegendDiv.appendChild(colorRectangle)\n      })\n    }\n  }\n  \n  updateChildren() {\n    let data = this.getData()\n    let colorMap = this.getColorMap()\n    \n    let scaleAttribute\n    if (this.getSelectedAction() === \"grouping\") {\n      scaleAttribute = this.getCurrentScaleAttribute()\n    } else {\n      scaleAttribute = this.getDefaultScaleAttribute()\n    }\n    \n    let colorAttribute\n    if (this.getSelectedAction() === \"coloring\") {\n      colorAttribute = this.getCurrentColorAttribute()\n    } else {\n      colorAttribute = this.getDefaultColorAttribute()\n    }\n    \n    this.children.forEach(child => {\n      child.setData(data)\n      child.setCurrentDrawingStateAsDefault()\n      child.setDefaultScaleAttribute(scaleAttribute)\n      child.setCurrentScaleAttribute(scaleAttribute)\n      child.setDefaultColorAttribute(colorAttribute)\n      child.setCurrentColorAttribute(colorAttribute)\n      child.setColorMap(colorMap)\n      child.setAxisDomain()\n      child.runSelectedAction()\n    })\n  }\n  \n  runSelectedAction() {\n    this.resetDisplay()\n    \n    let action;\n    switch(this.getSelectedAction()) {\n      case \"none\":\n        action = new NullAction()\n        break\n      case \"filter\":\n        action = new FilterAction()\n        action.setFilterValue(this.getSelectedValue())\n        break\n      case \"grouping\":\n        action = new GroupingAction()\n        this.setCurrentScaleAttribute(this.getSelectedAttribute())\n        this.setAxisDomain()\n        break\n      case \"coloring\":\n        action = new ColoringAction()\n        this.setCurrentColorAttribute(this.getSelectedAttribute())\n        action.setColorMap(this.getColorMap())\n        break\n    }\n\n    action.setAttribute(this.getSelectedAttribute())\n    this.runAction(action)\n    \n    this.draw()\n    this.refreshColorLegend()\n    \n    this.updateChildren()\n  }\n  \n  runAction(action) {\n    if (action.groupsData()) {\n      this.setPositionsByGroup(action.runOn(this.incomingData))\n    } else {\n      this.processedData = action.runOn(this.incomingData)\n    }\n  }\n  \n  removeOptionsOfSelect(select) {\n    while(select.options.length > 0) {\n      select.options.remove(0)\n    }\n  }\n\n  removeChildren(element) {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n  \n  removeChild(child) {\n    let children = this.getChildren()\n    children.splice(children.indexOf(child), 1)\n    this.childrenDiv.removeChild(child.getContainer())\n  }\n  \n  resetDisplay() {\n    this.runAction(new ResetAction())\n    this.setCurrentScaleAttribute(this.getDefaultScaleAttribute())\n    this.setCurrentColorAttribute(this.getDefaultColorAttribute())\n    this.refreshColorLegend()\n    this.setAxisDomain()\n    this.draw()\n  }\n  \n  draw() {\n    const context = this.canvas.node().getContext(\"2d\")\n    context.save()\n    context.clearRect(0, 0, this.canvasDimensions.width, this.canvasDimensions.height)\n    this.processedData.forEach(element => {\n      context.fillStyle = element.drawing.currentColor\n      context.fillRect(\n        element.drawing.currentPosition.x,\n        element.drawing.currentPosition.y, \n        this.pointWidth, \n        this.pointWidth\n      ) \n    })\n    context.restore()\n  }\n  \n  updateSize(newWidth, newHeight) {\n    this.div.style.width = newWidth\n    this.div.style.height = newHeight\n    this.refreshDivSizes()\n    this.children.forEach(child => {\n      child.updateSize(newWidth, newHeight)\n    })\n  }\n  \n  setPositionsByGroup(groups) {\n    let groupGapSize = this.getGroupGapSize()\n    let values = Object.keys(groups)\n    values.forEach(value => {\n      let start = this.canvasDimensions.width / values.length * values.indexOf(value) + (groupGapSize / 2)\n      groups[value].forEach(element => {\n        element.drawing.currentPosition.x = Pane.getRandomInteger(start, start + this.canvasDimensions.width / values.length - groupGapSize)\n        element.drawing.currentPosition.y = Pane.getRandomInteger(0, this.canvasDimensions.height)\n      })\n    }) \n  }\n  \n  addChild(child) {\n    this.children.push(child)\n    this.childrenDiv.appendChild(child.getContainer())\n  }\n  \n  registerNewPane() {\n    \n    let newDiv = <div></div>;\n    newDiv.style.height = \"auto\";\n    newDiv.style.width =  \"auto\";\n    newDiv.style.margin = \"0 auto\";\n    newDiv.style.display = \"flex\";\n    newDiv.style.flexDirection = \"row\";\n    newDiv.style.flexWrap = \"wrap\";\n    newDiv.style.justifyContent = \"center\";\n    \n    this.childrenDiv.appendChild(newDiv)\n\n    let pane = new Pane(newDiv, this.pointWidth, this.getData(), this.getColorMap(), this.getDiv().style.width, this.getDiv().style.height);\n    this.addChild(pane);\n    this.getDiagram().addConnection(this, pane);\n    \n    this.redrawAllConnectionsInDiagram()\n    \n    pane.setParent(this);\n    pane.setDiagram(this.getDiagram()); \n  }\n  \n  redrawAllConnectionsInDiagram() {\n    // connections should only be redrawn after DOM elements have been repainted (addConnection can move up to every DOM element on the canvas)\n    let diagram = this.getDiagram()\n    requestAnimationFrame(function(){diagram.redrawConnections();});\n  }\n  \n  calculateCanvasDimensions() {\n      return {\n        \"width\": Math.floor(this.getPixelValueFromString(this.canvasDiv.style.width) - this.canvasMargin.left - this.canvasMargin.right),\n        \"height\": Math.floor(this.getPixelValueFromString(this.canvasDiv.style.height) - this.canvasMargin.top - this.canvasMargin.bottom) \n      }\n  }\n  \n  removeConnectionsToChildren() {\n    let diagram = this.getDiagram()\n    let children = this.getChildren()\n    \n    children.forEach(child => {\n      diagram.removeConnection(child.getParentConnection())\n    })\n  }\n  \n  setAxisDomain() {\n    let domain = this.getCombinationsOfValuesOfAttribute(this.getCurrentScaleAttribute())\n    this.scale.domain(domain)\n    this.g_axis\n      .call(this.axis)\n      .selectAll(\"text\")\n        .attr(\"transform\", \"translate(-12.5, 10)rotate(-90)\")\n        .style(\"text-anchor\", \"end\")\n  }\n  \n  setCurrentDrawingStateAsDefault() {\n    this.incomingData.forEach(element => {\n      element.drawing.defaultColor = element.drawing.currentColor\n      element.drawing.defaultPosition.x = element.drawing.currentPosition.x\n      element.drawing.defaultPosition.y = element.drawing.currentPosition.y\n    }) \n  }\n  \n  setDataRecursively(data) {\n    this.setData(data)\n    \n    this.getChildren().forEach(child => {\n      child.setDataRecursively(data)\n    })\n  }\n  \n  setData(data) {\n    this.incomingData = Pane.deepClone(data)\n    if (!this.incomingData[0].drawing) {\n      this.initializeData()\n    }\n  }\n  \n  setCurrentScaleAttribute(attribute) {\n    this.currentScaleAttribute = attribute\n    this.currentScaleAttributeDiv.innerHTML = \"Current scale attribute: \" + attribute\n  }\n\n  setDefaultScaleAttribute(attribute) {\n    this.defaultScaleAttribute = attribute\n  }\n  \n  setSelectedAction(action) {\n    this.selectedAction = action\n  }\n\n  setSelectedValue(value) {\n    this.selectedValue = value\n  }\n\n  setSelectedAttribute(attribute) {\n    this.selectedAttribute = attribute\n  }\n  \n  setDefaultColorAttribute(attribute) {\n    this.defaultColorAttribute = attribute\n  }\n  \n  setCurrentColorAttribute(attribute) {\n    this.currentColorAttribute = attribute\n    this.currentColorAttributeDiv.innerHTML = \"Current color attribute: \" + attribute\n  }\n  \n  setColorMap(colorMap) {\n    this.colorMap = colorMap\n  }\n  \n  setDiagram(diagram) {\n    this.diagram = diagram\n  }\n  \n  setParent(pane) {\n    this.parent = pane\n  }\n  \n  setParentConnection(parentConnection){\n    this.parentConnection = parentConnection\n  }\n  \n  setGroupGapSize(size) {\n    this.groupGapSize = size\n  }\n  \n  getCombinationsOfValuesOfAttribute(attribute=\"\") {\n    if (attribute === \"\") {\n      return []\n    }\n    \n    let values = {}\n    this.incomingData.forEach(element => {\n      values[element[attribute]] = true\n    })\n    \n    return Object.keys(values)\n  }\n  \n  getValuesOfAttribute(attribute=\"\") {\n    if (attribute === \"\") {\n      return []\n    }\n    \n    let arrayAttributes = [\"themes\", \"languages\"]\n    let values = {}\n    if (arrayAttributes.includes(attribute)) {\n      this.incomingData.forEach(element => {\n        element[attribute].forEach(value => {\n          values[value] = true\n        })\n      })\n    } else {\n      this.incomingData.forEach(element => {\n        values[element[attribute]] = true\n      })\n    }\n    \n    return Object.keys(values)\n  }\n  \n  getData() {\n    return Pane.deepClone(this.processedData)\n  }\n  \n  getIncomingData() {\n    return Pane.deepClone(this.incomingData)\n  }\n\n  getCurrentScaleAttribute() {\n    return this.currentScaleAttribute\n  }\n  \n  getDefaultScaleAttribute() {\n    return this.defaultScaleAttribute\n  }\n\n  getSelectedAction() {\n    return this.selectedAction\n  }\n\n  getSelectedValue() {\n    return this.selectedValue\n  }\n\n  getSelectedAttribute() {\n    return this.selectedAttribute\n  }\n  \n  getDefaultColorAttribute() {\n    return this.defaultColorAttribute\n  }\n  \n  getCurrentColorAttribute() {\n    return this.currentColorAttribute\n  }\n  \n  getColorMap() {\n    return this.colorMap\n  }\n  \n  getDiagram() {\n    return this.diagram\n  }\n  \n  getChildren() {\n    return this.children\n  }\n  \n  getParent() {\n    return this.parent\n  }\n  \n  getParentConnection() {\n    return this.parentConnection\n  }\n  \n  getDiv() {\n    return this.div\n  }\n  \n  getPixelValueFromString(pixelString) {\n    let result = pixelString.replace(/px$/,\"\")\n    return parseInt(result)\n  }\n  \n  getContainer() {\n    return this.container\n  }\n  \n  getGroupGapSize() {\n    return this.groupGapSize\n  }\n  \n  //deletion with all children (transitively) deleted as well\n  \n  delete() {\n    this.removeAllConnections()\n    \n    let parent = this.getParent()\n    let diagram = this.getDiagram()\n    \n    if (parent) {\n      parent.removeChild(this)\n    } else {\n      diagram.removePane(this)\n    }\n    \n    this.redrawAllConnectionsInDiagram()\n  }\n  \n  removeAllConnections() {\n    this.getChildren().forEach(child => {\n      child.removeAllConnections()\n    })\n    \n    let diagram = this.getDiagram()\n    diagram.removeConnection(this.getParentConnection())\n  }\n  \n  //deletion with adding the own children to the own parent\n  \n  /*delete() {\n    let parent = this.getParent()\n    let diagram = this.getDiagram()\n    \n    this.removeConnectionsToChildren()\n    \n    if (parent) {\n      this.moveChildrenToParent()\n      parent.removeChild(this)\n      diagram.removeConnection(this.getParentConnection())\n    } else {\n      this.moveChildrenToDiagram()\n      diagram.removePane(this)\n    }\n    \n    this.redrawAllConnectionsInDiagram()\n    \n    this.resetDisplay()\n    this.updateChildren()   \n  }\n  \n  moveChildrenToParent() {\n    let parent = this.getParent()\n    let children = this.getChildren()\n    let diagram = this.getDiagram()\n    \n    children.forEach(child => {\n      parent.addChild(child)\n      child.setParent(parent)\n      diagram.addConnection(parent, child)\n    })  \n  }\n  \n  moveChildrenToDiagram() {\n    let parent = this.getParent()\n    let children = this.getChildren()\n    let diagram = this.getDiagram()\n    \n    children.forEach(child => {\n      diagram.addPane(child)\n      child.setParent(parent)\n    })\n  }*/\n}"}