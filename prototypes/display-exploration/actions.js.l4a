{"type":"Reference","version":"804ac0eec7f36da1c6261fb700ac09885f6b48ef","content":"class Action {\n  constructor () {\n    \n  }\n  \n  groupsData() {\n    return false\n  }\n  \n  runOn(data) {\n    return data\n  }\n}\n\nexport class NullAction extends Action {\n  constructor () {\n    super()\n  }\n  \n  setAttribute() {\n    return this\n  }\n  \n  runOn(data) {\n    return data\n  }\n}\n\nexport class ResetAction extends Action {\n  constructor() {\n    super()\n  }\n  \n  runOn(data) {\n    data.forEach(element => {\n      element.drawing.currentColor = element.drawing.defaultColor\n      element.drawing.currentPosition.x = element.drawing.defaultPosition.x\n      element.drawing.currentPosition.y = element.drawing.defaultPosition.y\n    })\n    return data\n  }\n}\n\nexport class GroupingAction extends Action {\n  constructor () {\n    super()\n    this.attribute = {}\n  }\n  \n  groupsData() {\n    return true\n  }\n  \n  setAttribute(attribute) {\n    this.attribute = attribute\n    return this\n  }\n  \n  runOn(data) {\n    if ((typeof this.attribute) === \"undefined\") {\n      throw new Error('The grouping attribute must be set.');\n    }\n    \n    let values = {}\n    data.forEach(element => {\n      values[element[this.attribute]] = true\n    })\n    \n    let groups = {}\n    Object.keys(values).forEach(key => {\n      groups[key] = []\n    })\n    \n    data.forEach(element => {\n      groups[element[this.attribute]].push(element)\n    })\n    \n    console.log(groups)\n    \n    return groups\n  }\n}\n\nexport class FilterAction extends Action {\n  constructor() {\n    super()\n    this.attribute = {}\n    this.filterValue = \"\"\n  }\n  \n  setAttribute(attribute) {\n    this.attribute = attribute\n    return this\n  }\n  \n  setFilterValue(filterValue) {\n    this.filterValue = filterValue\n    return this\n  }\n  \n  runOn(data) {\n    if ((typeof this.attribute) === \"undefined\") {\n      throw new TypeError('The filtering attribute must be set.');\n    }\n    if (this.filterValue === \"\") {\n      throw new TypeError('The filtering value must be set.');\n    }\n    \n    let arrayTypes = [\"languages\", \"themes\"]\n    \n    if(arrayTypes.includes(this.attribute)) {\n      return data.filter(element => element[this.attribute].includes(this.filterValue))\n    }\n    \n    return data.filter(element => element[this.attribute] === this.filterValue)\n  }\n}\n\nexport class ColoringAction extends Action {\n  constructor() {\n    super()\n    this.attribute = {}\n    this.colorMap = {}\n  }\n  \n  setAttribute(attribute) {\n    this.attribute = attribute\n    return this\n  }\n  \n  setColorMap(map) {\n    this.colorMap = map\n    return this\n  }\n  \n  runOn(data) {\n    if ((typeof this.attribute) === \"undefined\") {\n      throw new TypeError('The coloring attribute must be set.');\n    }\n    \n    if ((typeof this.colorMap) === \"undefined\") {\n      throw new TypeError('The color map must be set.');\n    }\n    \n    data.forEach(element => {\n      element.drawing.currentColor = this.colorMap[element[this.attribute]]\n    })\n    \n    return data\n  }\n  \n  getUniqueColor(colors) {\n    let color = this.getRandomColor()\n    while (colors[color] || color === \"ffffff\" || color === \"000000\") {\n      color = this.getRandomColor()\n    }\n    return color\n  }\n\n  getRandomColor() {\n    var letters = '0123456789abcdef'\n    var color = '#'\n    for (var i = 0; i < 6; i++) {\n      color += letters[this.getRandomInteger(0, 16)]\n    }\n    return color\n  }\n  \n  getRandomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min\n  }\n}"}