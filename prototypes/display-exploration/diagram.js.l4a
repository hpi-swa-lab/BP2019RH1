{"type":"Reference","version":"d2f93ed48c974f7cc3add892b2b805289b5b0012","content":"import { Pane } from \"./pane.js\";\nimport jsPlumb from \"https://lively-kernel.org/lively4/BP2019RH1/prototypes/npm-modules/jsplumb.js\";\nimport { AVFParser } from \"https://lively-kernel.org/voices/parsing-data/avf-parser.js\";\n\nexport class Diagram {\n  constructor(div, pointWidth) {\n    this.div = div;\n    this.div.style.position = \"absolute\";\n    this.controlPanel = {}\n    this.diagramContainer = {};\n    this.pointWidth = pointWidth;\n    this.initialData = {};\n    this.colorMap = {};\n    this.canvasDimensions = {};\n    this.panes = [];\n    this.containers = [];\n    this.addButton = <button>Add Pane</button>;\n    this.inputPaneSize = <div></div>;\n    this.dataSets = [\"Somalia\", \"Covid19-2020-03-24\"]\n    this.dataSetSelect = <select></select>;\n    this.initialize();\n  }\n\n  initialize() {\n    this.div.style.overflow = \"auto\";\n    this.controlPanel = <div></div>;\n    this.controlPanel.style.border = \"1px solid black\";\n    this.controlPanel.style.width = \"100%\";\n    this.controlPanel.style.height = this.div.getBoundingClientRect().height * 0.09 + \"px\";\n    \n    this.jsPlumb = jsPlumb.jsPlumb.getInstance();\n    this.jsPlumb.setContainer(this.div);\n    \n    this.jsPlumb.importDefaults({\n      Connector : [ \"Bezier\", { curviness: 1 } ],\n      Anchors : [ \"BottomCenter\", \"TopCenter\"]\n    });\n\n    this.canvasDimensions = {\n      \"width\": this.div.getBoundingClientRect().width,\n      \"height\": this.div.getBoundingClientRect().height\n    };\n\n    this.div.appendChild(<br></br>);\n    this.div.appendChild(this.controlPanel);\n    \n    this.diagramContainer = <div></div>;\n    this.diagramContainer.id = \"diagramContainer\"\n    this.diagramContainer.style.display = \"flex\";\n    this.diagramContainer.style.flexDirection = \"row\";\n    this.diagramContainer.style.height = \"auto\";\n    this.div.appendChild(this.diagramContainer);\n    \n    this.labelPaneWidth =  <label for=\"paneWidth\">Pane width:</label>;\n    this.inputPaneWidth = <input type=\"number\" id=\"paneWidth\" name=\"paneWidth\" value=\"640\"></input>;\n    this.labelPaneHeight =  <label for=\"paneHeight\">Pane height:</label>;\n    this.inputPaneHeight = <input type=\"number\" id=\"paneHeight\" name=\"paneHeight\" value=\"320\"></input>;\n    \n    this.applyNewSizeButton = <button>Apply</button>;\n    this.applyNewSizeButton.addEventListener(\"click\", () => this.applyNewPaneSize());\n    \n    this.inputPaneSize.appendChild(this.labelPaneWidth);\n    this.inputPaneSize.appendChild(this.inputPaneWidth);\n    this.inputPaneSize.appendChild(this.labelPaneHeight);\n    this.inputPaneSize.appendChild(this.inputPaneHeight);\n    this.inputPaneSize.appendChild(this.applyNewSizeButton)\n    \n    this.controlPanel.appendChild(this.inputPaneSize);\n    \n    this.dataSets.forEach(dataSet => {\n      this.dataSetSelect.options[this.dataSetSelect.options.length] = new Option(dataSet)\n    })\n    this.dataSetSelect.addEventListener(\"change\", async () => {\n      await this.changeDataSet(this.dataSetSelect.options[this.dataSetSelect.selectedIndex].value)\n    })\n    this.controlPanel.appendChild(this.dataSetSelect)\n    \n    this.addButton.style.margin = \"0 auto\";\n    this.addButton.style.display = \"table\";\n    this.addButton.addEventListener(\"click\", () => {\n      this.addNewPane();\n    });\n    \n    this.controlPanel.appendChild(this.addButton);\n    \n    this.dataSetSelect.dispatchEvent(new Event(\"change\"))\n  }\n  \n  applyNewPaneSize() {\n    let newWidth = this.inputPaneWidth.value + \"px\";\n    let newHeight = this.inputPaneHeight.value + \"px\";\n    this.panes.forEach(pane => {\n      pane.updateSize(newWidth, newHeight)\n      pane.setData(this.initialData)\n      pane.runSelectedAction()\n    });\n    this.redrawConnections()\n  }\n  \n  async changeDataSet(setName) {\n    let newData;\n    let newColorMap;\n    \n    switch(setName) {\n      case \"Somalia\":\n        newData = await AVFParser.loadCompressedIndividualsAnsweredThemes(\"OCHA\")\n        newColorMap = await AVFParser.getOchaColorMap()\n        break;\n      case \"Covid19-2020-03-24\":\n        newData = await AVFParser.rebuildAndLoadCovidDataFlatThemes(\"2020-03-24\")\n        newColorMap = await AVFParser.getCoronaColorMap()\n        break;\n    }\n    \n    this.setColorMap(newColorMap)\n    this.setData(newData)\n    this.refreshAttributes()\n    this.runActions()\n  }\n  \n  refreshAttributes() {\n    this.panes.forEach(pane => {\n      pane.refreshAttributeSelectOptionsRecursively()\n    })\n  }\n  \n  runActions() {\n    this.panes.forEach(pane => {\n      pane.runSelectedAction()\n    })\n  }\n  \n  setData(newData) {\n    this.initialData = newData\n\n    this.panes.forEach(pane => {\n      pane.setDataRecursively(newData)\n    })\n  }\n  \n  setColorMap(newColorMap) {\n    this.colorMap = newColorMap\n    \n    this.panes.forEach(pane => {\n      pane.setColorMap(newColorMap)\n    })\n  }\n\n  addNewPane() {    \n    let newDiv = <div></div>;\n    newDiv.style.height = \"auto\";\n    newDiv.style.width =  \"auto\";\n    newDiv.style.margin = \"0 auto\";\n    newDiv.style.display = \"flex\";\n    newDiv.style.flexDirection = \"row\";\n    newDiv.style.justifyContent = \"center\";\n    newDiv.style.flexWrap = \"wrap\";\n\n    let pane = new Pane(newDiv, this.pointWidth, this.initialData, this.colorMap, this.inputPaneWidth.value + \"px\", this.inputPaneHeight.value + \"px\");\n    \n    this.addPane(pane)\n  }\n  \n  addConnection(parent, child) {\n    let connection = this.jsPlumb.connect({\n      source: parent.getDiv(),\n      target: child.getDiv(),\n      endpoint:[ \"Dot\", { radius: 5}]\n    });\n    child.setParentConnection(connection);\n  }\n  \n  removeConnection(connection) {\n    this.jsPlumb.deleteConnection(connection)\n  }\n  \n  redrawConnections() {\n    this.jsPlumb.repaintEverything();\n  }\n  \n  addPane(pane) {\n    pane.setDiagram(this)\n    this.panes.push(pane)\n    this.diagramContainer.appendChild(pane.getContainer())\n  }\n\n  removePane(pane) {\n    this.panes.splice(this.panes.indexOf(pane), 1)\n    this.diagramContainer.removeChild(pane.getContainer())\n  }\n\n  getColorMap() {\n    return this.colorMap\n  }\n\n  isEmptyObject(obj){\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\n  }\n}"}