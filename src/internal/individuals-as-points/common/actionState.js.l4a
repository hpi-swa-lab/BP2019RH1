{"type":"Reference","version":"186b32af779bb4e0e6bc5e4759022ad7c80cb016","content":"import {\n  SelectAction,\n  FilterAction, \n  ColorAction, \n  InspectAction,\n  NullAction,\n  SelectActionType,\n  FilterActionType, \n  ColorActionType, \n  NullActionType,\n  InspectActionType\n} from \"./actions.js\"\n\nimport { DataProcessorType } from \"./data-processor.js\"\nimport { ColorStoreType } from \"./color-store.js\"\nimport { GeoDataType } from \"../../../geodata/geoData.js\"\n\nimport { deepCopy } from \"./utils.js\"\n\nexport class State {\n  constructor () {\n    this.filterAction = new FilterAction()\n    this.filterAction.setIncludeStop(false)\n    this.selectAction = new SelectAction()\n    this.colorAction = new ColorAction()\n    this.inspectAction = new InspectAction()\n    this.localActions = []\n    this.dataProcessor = {}\n    this.colorStore = {}\n    this.geoData = {}\n  }\n  \n  static fromState(state) {\n    let newState = new State()\n    newState.filterAction = deepCopy(state.filterAction)\n    newState.selectAction = deepCopy(state.selectAction)\n    newState.colorAction = deepCopy(state.colorAction)\n    newState.inspectAction = state.inspectAction // deepCopy not needed?\n    newState.localActions = deepCopy(state.localActions)\n    newState.colorStore = state.colorStore\n    newState.dataProcessor = state.dataProcessor\n    newState.geoData = state.geoData\n    \n    return newState\n  }\n  \n  updateState(element) {\n    \n    switch(element.getType()) {\n      case (ColorActionType):\n        this._applyColorAction(deepCopy(element))\n        break\n      case (SelectActionType):\n        this._applySelectAction(deepCopy(element))\n        break\n      case (FilterActionType):\n        this._applyFilterAction(deepCopy(element))\n        break\n      case (DataProcessorType):\n        this._applyNewDataProcessor(element)\n        break\n      case (ColorStoreType):\n        this._applyNewColorStore(element)\n        break\n      case (GeoDataType):\n        this._applyNewGeoData(element)\n        break\n      case (InspectActionType):\n        this._applyNewInspectAction(element)\n        break\n      default:\n        break\n    }\n  }\n  \n  updateLocalActions(localActions) {\n    this.localActions = deepCopy(localActions)\n  }\n  \n  _applyNewInspectAction(action) {\n    this.inspectAction = action\n  }\n  \n  _applyColorAction(action) {\n    this.colorAction = action\n  }\n  \n  _applySelectAction(action) {\n    action.getAddedFilters().forEach(filter => {\n      this.selectAction.addFilter(filter)\n    })\n    action.getRemovedFilters().forEach(filter => {\n      this.selectAction.removeFilter(filter)\n    })\n    \n    this.selectAction.setCombinationLogic(action.getCombinationLogic())\n  }\n  \n  _applyFilterAction(action) {    \n    action.getAddedFilters().forEach(filter => {\n      this.filterAction.addFilter(filter)\n    }) \n    action.getRemovedFilters().forEach(filter => {\n      this.filterAction.removeFilter(filter)\n    })\n    // anything else that needs to be transferred? DataProcessor?\n    this.filterAction.setCombinationLogic(action.getCombinationLogic())\n  }\n  \n  _applyNewDataProcessor(dataProcessor) {\n    this.dataProcessor = dataProcessor\n    if (!this.filterAction.dataProcessor) {\n      this.filterAction.setDataProcessor(dataProcessor)\n    }\n    if (!this.selectAction.dataProcessor) {\n      this.selectAction.setDataProcessor(dataProcessor)\n    }\n    if (!this.colorAction.dataProcessor) {\n      this.colorAction.setDataProcessor(dataProcessor)\n    }\n    if (!this.inspectAction.dataProcessor) {\n      this.inspectAction.setDataProcessor(dataProcessor)\n    }\n  }\n  \n  _applyNewColorStore(colorStore) {\n    this.colorStore = colorStore\n    \n    if (!this.selectAction.colorStore) {\n      this.selectAction.setColorStore(colorStore)\n    }\n    if (!this.colorAction.colorStore) {\n      this.colorAction.setColorStore(colorStore)\n    }\n    if (!this.inspectAction.colorStore) {\n      this.inspectAction.setColorStore(colorStore)\n    }\n  }\n  \n  _applyNewGeoData(geoData) {\n    this.geoData = geoData\n  }\n\n\n}"}